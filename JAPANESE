
=head1 名称

ShiftJIS::Regexp - Shift-JISで書かれた正規表現

=head1 このPODについて

このPODは、Shift-JISで書かれています。

'C<あ>' が C<HIRAGANA LETTER A> に見えますか ?
また、'C<\>' が C<REVERSE SOLIDUS> ではなく C<YEN SIGN> に見えますか ?
さもなければフォントを正しいものに交換した方がよいでしょう。
(あるいは POD が変な変換をされたのかも知れません。)

=head1 概要

  use ShiftJIS::Regexp qw(:all);

  match('あお１２', '\p{Hiragana}{2}\p{Digit}{2}');
# これは次行と等価です。
  match('あお１２', '\pH{2}\pD{2}');

  match('あいいううう', '^あい+う{3}$');

  replace($str, 'A', 'Ａ', 'g');

=head1 詳細

このモジュールは、正規表現をShift-JISで書いてPerlで用いるための
幾つかの関数を提供します。

このモジュールにおいて正しい Shift-JIS 文字は、
以下の正規表現にマッチするものでなければなりません。

    [\x00-\x7F\xA1-\xDF]|[\x81-\x9F\xE0-\xFC][\x40-\x7E\x80-\xFC]

マルチバイトエンコーディングにおける誤マッチを避けるため、
このモジュールではマッチングが毎回文字境界上で行われるための
正規表現を与えられたパターンに付加しています。

F<perlfaq6> の "How can I match strings with multibyte characters?" を参照。

また、後述の「誤マッチを避ける」も参照してください。

=head2 関数

=over 4

=item C<re(PATTERN)>

=item C<re(PATTERN, MODIFIER)>

Shift-JISで書かれた正規表現をPerlでパース可能なように変換して返します。

C<PATTERN>には、Shift-JISで書かれた正規表現を文字列として与えます。

C<MODIFIER>としては、以下の修飾子（複数指定可）を文字列で与えます。

     i  大文字／小文字を区別しない (ASCIIアルファベット)
     I  大文字／小文字を区別しない (ギリシャ文字、キリル文字、全角ラテン文字)
     j  平仮名と片仮名を区別しない（しかし半角片仮名は考慮されません）

     s  文字列を単一行として扱う
     m  文字列を複数行として扱う
     x  バックスラッシュの後または文字クラスの中にない空白文字 (つまり [\x20\n\r\t\f])
        を無視する。しかしコメントは認識しません。

     o  一回パースして（コンパイルではありません!) 結果を内部にキャッシュします。

C<re('^コンピューター?$')>は、C<'コンピューター'>またはC<'コンピュータ'>にマッチします。

C<re('^らくだ$','j')> は、C<'らくだ'>, C<'ラクダ'>, C<'らクだ'>, などにマッチします。

B<C<o>修飾子>

     while (<DATA>) {
        print replace($_, '(perl)', '<strong>$1</strong>', 'igo');
     }

     は、次のコードよりも効率がよいでしょう

     while (<DATA>) {
        print replace($_, '(perl)', '<strong>$1</strong>', 'ig');
     }

     なぜなら後者では関数が呼ばれるたびに毎回パターンをパースするからです。

=item C<match(STRING, PATTERN)>

=item C<match(STRING, PATTERN, MODIFIER)>

組み込みの C<m//> 演算子のように動作します。
ただし、C<@list = $string =~ m/PATTERN/g> と異なり、
キャッシュの括弧を忘れずに付けてください。
括弧は自動的には付きません。

    $string = "あいうえお";

    @list = match($string, '[いえ]', 'g'); # だめ。結果にゴミが混じる!
    @list = match($string,'([いえ])','g'); # 良し。

C<PATTERN>にはパターンを文字列として与えます。

C<MODIFIER>には修飾子を文字列として与えます。

     i,I,j,s,m,x,o   re()の説明をご覧ください。

     g  グローバルマッチ
     z  パターンが空文字列にマッチするものであることを関数に知らせる。
        (すみません。これを使うべきかどうかを自動的には判別できません。)

B<C<z>修飾子>

パターンが空文字列にマッチするものである場合、C<z>修飾子がないと
以下のように１回だけマッチすべきところを２回マッチすることがあります。
C<z>修飾子は、これを防ぎます。

     replace('アイウイイエ', '(?=イ)', 'あ', 'g');  # アああイウああイああイエ
     replace('アイウイイエ', '(?=イ)', 'あ', 'gz'); # アあイウあイあイエ

=item C<replace(STRING or SCALAR REF, PATTERN, REPLACEMENT)>

=item C<replace(STRING or SCALAR REF, PATTERN, REPLACEMENT, MODIFIER)>

組み込みの C<s///> 演算子のように動作します。

第一変数としてスカラーへのリファレンスを渡すと、スカラーを変更して
置換回数を返します。

第一変数として文字列（リファレンスではない）を渡すと、与えられたスカラーは
変更せず、置換後の文字列を返します。

    my $str = '金１５３００００円';
    1 while replace(\$str, '(\pD)(\pD{3})(?!\pD)', '$1，$2');
    print $str; # 金１，５３０，０００円

C<MODIFIER>には修飾子を文字列として与えます。

     i,I,j,s,m,x,o   re()の説明をご覧ください。
     g,z             match()の説明をご覧ください。

=item C<jsplit(PATTERN or ARRAY REF of [PATTERN, MODIFIER], STRING)>

=item C<jsplit(PATTERN or ARRAY REF of [PATTERN, MODIFIER], STRING, LIMIT)>

組み込みの C<split()> 演算子のように動作します。

スカラーコンテキスト／ボイドコンテキストで特殊配列 C<@_> に結果を入れることはしません。
スカラーコンテキストでは、見つかったフィールドの数を返すだけです。

C<PATTERN>には、Shift-JISで書かれた正規表現を文字列として与えます。

    jsplit('／', 'あいう／えおメ^');

C<PATTERN> に C<' '> を与えても特別な意味はありません。
単に、組み込みの C<CORE::split / /> と同様に、一個のスペースにより分割するだけです。

空白類文字（この場合、和字間隔（全角スペース）も空白類文字とみなします）で
分割したい場合には、C<PATTERN>に未定義値を与えるか、
C<splitspace()> 関数を使ってください。

    jsplit(undef, ' 　 This  is 　 perl.');
    splitspace(' 　 This  is 　 perl.');
    # ('This', 'is', 'perl.')

パターンに修飾子をつけたい場合は、無名配列 C<[PATTERN, MODIFIER]> を
第一引数に用いることができます。

    jsplit([ 'あ', 'jo' ], '01234あいうえおアイウエオ');

あるいは、埋め込み修飾子（後述）を用いることもできます。

    jsplit('(?jo)あ', '01234あいうえおアイウエオ');

C<MODIFIER>には修飾子を文字列として与えます。

     i,I,j,s,m,x,o   re()の説明をご覧ください。

=item C<splitspace(STRING)>

=item C<splitspace(STRING, LIMIT)>

組み込みの C<split(' ', STRING, LIMIT)> のように動作します。
空白類文字（和字間隔（全角スペース）を含む）により
文字列 C<STRING> を分割し、結果のリストを返します。
文字列先頭の空白類文字はフィールドを作りません。

B<注意:> C<splitspace(STRING, LIMIT)> は
C<jsplit(undef, STRING, LIMIT)> と等価です。

=item C<splitchar(STRING)>

=item C<splitchar(STRING, LIMIT)>

組み込みの C<split(//, STRING, LIMIT)> のように動作します。
文字列 C<STRING> を文字ごとに分割したリストを返します。

B<注意:> C<splitchar(STRING, LIMIT)> は
C<jsplit('', STRING, LIMIT)> と等価です。

=back

=head2 基本的な正規表現

   正規表現          意味

   ^               文字列の先頭にマッチします。
                   ただし 'm' 修飾子を使った場合は、行の先頭にマッチします。

   $               文字列末尾か、末尾の改行文字 \n の前にマッチします。
                   ただし 'm' 修飾子を使った場合は、行の末尾にマッチします。

   .               改行文字 \n 以外の任意の一文字にマッチします。
                   ただし 's' 修飾子を使った場合は、\nを含む任意の一文字にマッチします。

   \A              文字列の先頭にマッチします。
   \Z              文字列末尾か、末尾の改行文字 \n の前にマッチします。
   \z              文字列末尾だけにマッチします。('(?!\n)\Z' と同じ)

   \C              一個のオクテットにマッチします。

   \j              任意の一文字にマッチします。
                   つまりこのモジュールで言う [\0-\x{FCFC}] と同じです。

   \J              改行文字 \n 以外の任意の一文字にマッチします。
                   つまりこのモジュールで言う [^\n] と同じです。

     * \j と \J とは、このモジュールによる拡張です。例えば、

        match($_, '(\j{5})\z') は末尾の五文字（\n を含む）を返します。
        match($_, '(\J{5})\Z') は末尾の五文字（\n は除く）を返します。

=head2 メタ文字

   \a              ベル       (BEL)
   \b              後退       (BS) * 文字クラスの中だけ *
   \e              エスケープ (ESC)
   \f              書式送り   (FF)
   \n              改行       (LF)
   \r              復帰       (CR)
   \t              水平タブ   (HT)
   \0              ナル文字   (NUL)

   \ooo            一バイト文字を八進数で指定
   \xhh            一バイト文字を十六進数で指定
   \x{hhhh}        二バイト文字を十六進数で指定
   \c[             制御文字

      例えば \012 \123 \x5c \x5C \x{824F} \x{9Fae} \cA \cZ \c^ \c? など。

=head2 定義済み文字クラス

   通常の形式     省略形     POSIX形式         文字および文字の範囲による定義

   \d                                          [0-9]
   \D                                          [^0-9]
   \w                                          [0-9A-Z_a-z]
   \W                                          [^0-9A-Z_a-z]
   \s                                          [\t\n\r\f ]
   \S                                          [^\t\n\r\f ]

   \p{Xdigit}     \pX        [[:xdigit:]]      [0-9A-Fa-f]
   \p{Digit}      \pD        [[:digit:]]       [0-9０-９]
   \p{Upper}      \pU        [[:upper:]]       [A-ZＡ-Ｚ]
   \p{Lower}      \pL        [[:lower:]]       [a-zａ-ｚ]
   \p{Alpha}      \pA        [[:alpha:]]       [A-Za-zＡ-Ｚａ-ｚ]
   \p{Alnum}      \pQ        [[:alnum:]]       [0-9A-Za-z０-９Ａ-Ｚａ-ｚ]

   \p{Word}       \pW        [[:word:]]        [_\p{Digit}\p{European}\p{Kana}\p{Kanji}]
   \p{Punct}      \pP        [[:punct:]]       [!-/:-@[-`{-~｡-･、-！´-＿―-〓∈-∩∧-∃∠-∬Å-¶◯─-╂]
   \p{Graph}      \pG        [[:graph:]]       [\p{Word}\p{Punct}]
   \p{Print}      \pT        [[:print:]]       [\x20\x{8140}\p{Graph}]
   \p{Space}      \pS        [[:space:]]       [\x20\x{8140}\x09-\x0D]
   \p{Blank}      \pB        [[:blank:]]       [\x20\x{8140}\t]
   \p{Cntrl}      \pC        [[:cntrl:]]       [\x00-\x1F\x7F]
   \p{ASCII}                 [[:ascii:]]       [\x00-\x7F]

   \p{Roman}      \pR        [[:roman:]]       [\x21-\x7E]
   \p{Hankaku}    \pY        [[:hankaku:]]     [\xA1-\xDF]
   \p{Zenkaku}    \pZ        [[:zenkaku:]]     [\x{8140}-\x{FCFC}]

 ( \p{^Zenkaku}   \p^Z       [[:^zenkaku:]]    [\x00-\x7F\xA1-\xDF] )

   \p{X0201}                 [[:x0201:]]       [\x20-\x7F\xA1-\xDF]
   \p{X0208}                 [[:x0208:]]       [\x{8140}-〓∈-∩∧-∃∠-∬Å-¶◯０-９Ａ-Ｚａ-ｚぁ-んァ-ヶΑ-Ωα-ωА-Яа-я─-╂亜-腕弌-熙]
   \p{X0211}                 [[:x0211:]]       [\x00-\x1F]
   \p{JIS}        \pJ        [[:jis:]]         [\p{X0201}\p{X0208}\p{X0211}]

   \p{NEC}        \pN        [[:nec:]]         [\x{8740}-\x{875D}\x{875f}-\x{8775}\x{877E}-\x{879c}\x{ed40}-\x{eeec}\x{eeef}-\x{eefc}]
   \p{IBM}        \pI        [[:ibm:]]         [\x{fa40}-\x{fc4b}]
   \p{Vendor}     \pV        [[:vendor:]]      [\p{NEC}\p{IBM}]
   \p{MSWin}      \pM        [[:mswin:]]       [\p{JIS}\p{NEC}\p{IBM}]

   \p{Halfwidth}             [[:halfwidth:]]   [!#$%&()*+,./0-9:;<=>?@A-Z\[\\\]^_`a-z{|}~]
   \p{Fullwidth}  \pF        [[:fullwidth:]]   [！＃＄％＆（）＊＋，．／０-９：；＜＝＞？＠Ａ-Ｚ［￥］＾＿｀ａ-ｚ｛｜｝￣]

   \p{Latin}                 [[:latin:]]       [A-Za-z]
   \p{FullLatin}             [[:fulllatin:]]   [Ａ-Ｚａ-ｚ]
   \p{Greek}                 [[:greek:]]       [Α-Ωα-ω]
   \p{Cyrillic}              [[:cyrillic:]]    [А-Яа-я]
   \p{European}   \pE        [[:european:]]    [A-Za-zＡ-Ｚａ-ｚΑ-Ωα-ωА-Яа-я]

   \p{HalfKana}              [[:halfkana:]]    [ｦ-ﾟ]
   \p{Hiragana}   \pH        [[:hiragana:]]    [ぁ-ん゛゜ゝゞ]
   \p{Katakana}   \pK        [[:katakana:]]    [ァ-ヶーヽヾ]
   \p{FullKana}  [\pH\pK]    [[:fullkana:]]    [ぁ-んァ-ヶ゛゜ーゝゞヽヾ]
   \p{Kana}                  [[:kana:]]        [ｦ-ﾟぁ-んァ-ヶ゛゜ーゝゞヽヾ]
   \p{Kanji0}     \p0        [[:kanji0:]]      [〃-〇]
   \p{Kanji1}     \p1        [[:kanji1:]]      [亜-腕]
   \p{Kanji2}     \p2        [[:kanji2:]]      [弌-熙]
   \p{Kanji}    [\p0\p1\p2]  [[:kanji:]]       [〃-〇亜-腕弌-熙]
   \p{BoxDrawing}            [[:boxdrawing:]]  [─-╂]

=over 4

=item *

C<\p{NEC}> は、NEC特殊文字とNEC選定IBM拡張文字にマッチします。
C<\p{IBM}> は、IBM拡張文字にマッチします。
C<\p{Vendor}> は、マイクロソフト (Microsoft) CP932のベンダー定義文字にマッチします。つまり、C<[\p{NEC}\p{IBM}]> と等価です。
C<\p{MSWin}> は、マイクロソフト (Microsoft) CP932の文字にマッチします。

=item *

C<\p{Kanji0}> は、JIS X 4061 の最小漢字文字クラスの文字にマッチします。
C<\p{Kanji1}> は、JIS X 0208 の第一水準漢字にマッチします。
C<\p{Kanji2}> は、JIS X 0208 の第二水準漢字にマッチします。
C<\p{Kanji}> は、JIS X 4061 の基本漢字文字クラスの文字にマッチします。

=item *

C<\p{Prop}>, C<\P{^Prop}>, C<[\p{Prop}]> などは互いに等価です。
この補集合は、C<\P{Prop}>, C<\p{^Prop}>, C<[\P{Prop}]>, C<[^\p{Prop}]>
などで表すことができます。

=item *

C<\pP>, C<\P^P>, C<[\pP]> などは互いに等価です。
この補集合は、C<\PP>, C<\p^P>, C<[\PP]>, C<[^\pP]>
などで表すことができます。

=item *

C<[[:class:]]> は C<[^[:^class:]]> と等価です。
この補集合は、C<[[:^class:]]> または C<[^[:class:]]> です。

=item *

C<\p{Prop}>, C<\P{Prop}>, C<[:class:]> の表現において、
C<Prop> および C<class> の部分では、大文字／小文字の違いは無視されます。
例えば C<\p{digit}>, C<[:BoxDrawing:]> などを用いることもできます。

=item *

C<\p{Prop}> および C<\P{Prop}> の表現において、接頭辞 C<Is> および C<In>
(例えば C<\p{IsProp}>, C<\P{InProp}>, etc.) を任意に付けることができます。
しかし接頭辞 C<Is> および C<In> は大文字／小文字の違いを区別しますので、
C<\p{isProp}>, C<\p{ISProp}> などは不可です。

=back

=head2 文字クラス

文字クラスの中には、リテラル文字、メタ文字、定義済み文字クラスを
入れることができます。
また、文字クラス中では、文字の範囲を使うことができます。
文字の範囲の端点は、リテラル文字かメタ文字で指定します。

Shift-JIS 文字の順序は:
  C<0x00 .. 0x7F, 0xA1 .. 0xDF, 0x8140 .. 0x9FFC, 0xE040 .. 0xFCFC>.

それゆえ C<[\0-\x{fcfc}]> は、Shift-JIS の任意の一文字にマッチします。

文字クラス中では、Shift-JIS文字として不正なバイトまたはバイト列は使えません
(例えば C<re('[\xA0-\xFF]')>)。エラーになります。

=head2 等価文字クラス

バージョン 0.13 から POSIX の等価文字クラス C<[=x=]> がサポートされます。
例えば、C<[[=あ=]]> は C<[ぁァｧあアｱ]> と、
C<[[=P=]]> は C<[pPｐＰ]> と、C<[[=4=]]> は C<[4４]> と、それぞれ等価です。
これらは、文字クラスの中で C<[[=c=]]>、C<[[=p=][=e=][=r=][=l=]]> のようにして
使うことができます。

C<[=x=]> の中には、任意の文字リテラルまたはメタ文字 C<\xhh>, C<\x{hhhh}> を
用いることができます。等価文字クラスに属する文字のうち、どの文字を使っても
かまいません。例えば、C<[=あ=]>, C<[=ア=]>, C<[=\x{82A0}=]>, C<[=\xB1=]>
などは、互いに同じ意味を持ちます。

C<[[=か=]]> は C<'か'>, C<'カ'>, C<'ｶ'>, C<'が'>, C<'ガ'>, C<'ｶﾞ'>,
C<'ヵ'> にマッチします。(C<'ｶﾞ'> は二文字ですが、照合要素としては一つです。
濁音、半濁音をもつカナの照合要素は、
濁音、半濁音を表す二文字の半角片仮名からなる文字列を含みます。

C<[[===]]> は C<EQUALS SIGN> か C<FULLWIDTH EQUALS SIGN> とマッチします。
C<[[=[=]]> は C<LEFT SQUARE BRACKET> か C<FULLWIDTH LEFT SQUARE BRACKET>
とマッチします。
C<[[=]=]]> は C<RIGHT SQUARE BRACKET> か C<FULLWIDTH RIGHT SQUARE BRACKET>
とマッチします。
C<[[=\=]]> は C<YEN SIGN> か C<FULLWIDTH YEN SIGN> とマッチします。

=head2 正規表現中の埋め込みコード (Perl 5.005 以降)

拡張正規表現 C<(?{ ... })> または C<(??{ ... })> は、
二バイト文字に特に注意を払わずにパースされます。

セキュリティ上の理由により、C<(?{ ... })> および C<(??{ ... })> は
関数 C<match()> や C<replace()> で使うことができません。

これらは、C<re()> 関数によってPerlにパース可能な正規表現に変換したのち、
あなたのコードのスコープの中で正規表現をコンパイルしてください。
C<use re 'eval';> の宣言が必要になるでしょう。

  use ShiftJIS::Regexp qw(:all);

  use re 'eval';

  $::res = 0;
  $_ = 'ポ' x 8;

  my $regex = re(q/
       \j*?
       (?{ $cnt = 0 })
       (
         ポ (?{ local $cnt = $cnt + 1; })
       )*
       ポポポ
       (?{ $::res = $cnt })
     /, 'x');

  /$regex/;
  print $::res; # 5

=head2 埋め込み修飾子

バージョン 0.15 から埋め込み修飾子が拡張されました。

埋め込み修飾子 C<(?iIjsmxo)> は、パターンの先頭にある場合、
またはパターンの先頭が C<^>, C<\A>, C<\G> のいずれか
であって埋め込み修飾子がその直後にある場合に限り、
本モジュール独自の修飾子 C<I>, C<j>, C<o> を含むことができます。

    e.g. (?sm)pattern  ^(?i)pattern  \G(?j)pattern  \A(?ijo)pattern

Perl 5.005 以前でも、C<match('エ', '(?i)ト')> は正しく偽となります。
なぜならこれは C<match('エ', 'ト', 'i')> のように働くからです。

注: 'エ' の第二バイトは 'G' であり、'ト' の第二バイトは 'g' です。

=head2 誤マッチを避ける

このモジュールは、
置換演算子における修飾子 'e' や C<while>-節によるループをサポートしていません。

これらの機能を利用するには、通常の構文（つまり、組み込みの演算子
C<m//> や C<s///>を使用する）を通す必要があります。

一バイト文字が二バイト文字の第二バイトにマッチしたり、
二バイト文字が文字境界の前と後の二バイトにマッチしたりといった
誤マッチを避けるため、正規表現 C<'\A(\j*?)'> または C<'\G(\j*?)'>を
用いることができます。

この場合、C<'(\j*?)'> に C<$1> を対応させ、本来の後方参照は、C<$2>
から始めることを忘れないでください。

例1

    use ShiftJIS::Regexp qw(re);

    $_ = 'あいうえおアイウエオ漢字 シフトＪＩＳ';
    my $regex = re('\G(?:\j*?)(\pK)');
    # または my $regex = re('\R{padG}(\pK)');

    while (/$regex/go) {
        print "found a katakana: $1\n";
    }

例2

    use ShiftJIS::Regexp qw(re);
    use ShiftJIS::String qw(strrev); # Shift-JIS版の scalar reverse()

    my $regex = re('\G(\j*?)(\w+)');
    # または my $regex = re('(\R{padG})(\w+)');

    foreach ('s/Perl/Camel/g', '(アイウエオ)AIUEO-漢字') {
        (my $str = $_) =~ s/$regex/$1.strrev($2)/geo; # $1. を付ける
        print "$str\n";
    }

B<注意:> 非常に長い文字列上で検索を行う場合、
C<\G(\j*?)> の代わりに特別な正規表現 C<\R{padG}> を用いるほうが安全と思われます。
なぜなら、C<\R{padG}> のほうが C<*> 指定子の繰返し回数が大きくなりにくく、
繰返しの上限に達する確率が低くなるからです。

=head1 注意事項

このモジュールでは正しい Shift-JIS 文字列の文字は
以下の正規表現にマッチしなければなりません。

   [\x00-\x7F\xA1-\xDF]|[\x81-\x9F\xE0-\xFC][\x40-\x7E\x80-\xFC]

外部リソースの文字列は、それが正しい Shift-JIS 文字列であると
分かっている場合を除いて C<ShiftJIS::String> モジュールの関数
C<issjis()> を用いて確認すべきです。

正しくない Shift-JIS 文字列を使うと変な結果になることがあります。
（正しくない Shift-JIS 文字列を使った場合、どんな結果になるか、
何も決まっていませんので、何も期待してはいけません。）

Shift-JIS の二バイト文字の中には、第二バイトが C<[\x40-\x7E]>、すなわち

   @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

であるものがあります。

Perl の構文解析では、このようなバイトについて
特別な処理はされていませんので、問題が発生することがあります。
例えば、リテラル C<"表"> は致命的エラーを引き起こします。
なぜなら、第二バイトの C<0x5C> が閉じクォートをエスケープするからです。

外部のファイル等から読み出した場合は、この問題は起こりませんが、
スクリプトを Shift-JIS で書く時には十分な注意が必要です。

Shift-JISのリテラル文字列を作るためには、
シングルクォート風のヒアドク（C<E<lt>E<lt> ''>）や、
メタ文字 C<\xhh> を使うほうがよいでしょう。

Shift-JIS の第二バイトに出て来ないASCII図形文字（C<[\x21-\x3F]>）は
以下の通り。

   !"#$%&'()*+,-./0123456789:;<=>?

クォート風演算子のデリミタとしては、これを使うとよいかもしれません。

=head1 既知のバグ

メタ文字 C<\U>, C<\L>, C<\Q>, C<\E> および変数展開は考慮されておりません。
必要なら、C<""> (or C<qq//>) 演算子を使ってください。

単語境界を扱うメタ文字 C<\b> および C<\B> は正しく動作しません。

修飾子 C<i>, C<I> および C<j> は、C<\p{}>, C<\P{}>, POSIX C<[: :]>.
(例えば C<\p{IsLower}>, C<[:lower:]> など) には作用しません。
そのため、C<re('\p{Lower}', 'iI')> の代わりに
C<re('\p{Alpha}')> を使用してください。

後読み言明 (例えば C<(?<=[A-Z])>) が直前の二バイト文字の第二バイトに
誤ってマッチすることには対処されていません。
例えば、 C<match("アイウ", '(?<=[A-Z])(\p{Kana})')> は C<('イ')>
を返しますが、もちろん誤りです。

控えめな量指定子を含むパターン (例えば C<.??>やC<\d*?>) は、
空文字列とマッチすることができますが、C<jsplit()> のパターンとして用いた場合、
組み込みの C<split()> から予想される動作と異なることがあります。

=head1 著者

SADAHIRO Tomoyuki <SADAHIRO@cpan.org> 貞廣 知行

  Copyright(C) 2001-2007, SADAHIRO Tomoyuki. Japan. All rights reserved.

  This module is free software; you can redistribute it
  and/or modify it under the same terms as Perl itself.

=head1 関連モジュール

=over 4

=item L<ShiftJIS::String>

=item L<ShiftJIS::Collate>

=back

=cut
